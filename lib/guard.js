// Generated by CoffeeScript 1.6.3
(function() {
  var EventEmitter, MemoryStore, fresh, guard,
    __slice = [].slice;

  EventEmitter = require('events').EventEmitter;

  fresh = require('fresh');

  MemoryStore = require('./memory_store');

  guard = function() {
    var invalidators;
    invalidators = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return function(req, res, next) {
      return guard.store.get(req.url, function(err, cached) {
        if (err != null) {
          return next(err);
        }
        if (fresh(req.headers, cached || {})) {
          guard.emit('hit', req.url, cached);
          return res.send(304);
        }
        guard.emit('miss', req.url, cached);
        res.cache = function(_arg) {
          var lastModified;
          lastModified = (_arg != null ? _arg : {}).lastModified;
          if (lastModified != null) {
            this.set('Last-Modified', new Date(lastModified).toUTCString());
          }
          return guard.store.set(req.url, this._headers, function(err) {
            var invalidator, _i, _len, _results;
            if (err != null) {
              return console.log("Error storing headers for path '" + req.url + "'", err);
            }
            _results = [];
            for (_i = 0, _len = invalidators.length; _i < _len; _i++) {
              invalidator = invalidators[_i];
              _results.push(invalidator.once('stale', function() {
                return guard.invalidate(req.url);
              }));
            }
            return _results;
          });
        };
        return next();
      });
    };
  };

  guard.invalidate = function(path, callback) {
    var _this = this;
    return this.store["delete"](path, function(err, cached) {
      _this.emit('invalidate', path, cached);
      if (callback != null) {
        return callback(err, cached);
      }
    });
  };

  guard.store = new MemoryStore();

  guard.__proto__ = EventEmitter.prototype;

  guard.on('hit', function(path, cached) {
    return console.log("Cache hit", path, cached);
  });

  guard.on('miss', function(path, cached) {
    return console.log("Cache miss", path, cached);
  });

  guard.on('invalidate', function(path, cached) {
    return console.log("Cache invalidate", path, cached && 'found' || 'not found');
  });

  module.exports = guard;

}).call(this);
